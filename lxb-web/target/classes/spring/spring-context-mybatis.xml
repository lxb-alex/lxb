<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache-4.3.xsd ">
    <!-- xsd 版本是 maven 导入的依赖包的版本 -->

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.lxb">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!-- ========================================= 数据库相关配置 START ========================================= -->
    <!-- 1.加载一个properties文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config/db.properties"/>
    </bean>

    <!-- 2.配置数据源 -->
    <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" />
        <property name="maxActive" value="${jdbc.pool.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.pool.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:com/lxb/**/*Dao.xml"></property>
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lxb.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 配置AOP切入点 -->
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution(* com.lxb.sys.service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
    </aop:config>

    <!--
        &lt;!&ndash; 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  &ndash;&gt;
        <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    -->

    <!-- ========================================= 数据库相关配置 END ========================================= -->

    <!-- ========================================= 缓存相关配置 START ========================================= -->

    <!--    &lt;!&ndash; 配置 JSR303 Bean Validator 定义 &ndash;&gt;
        <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />-->

    <!-- spring 对 ehcache 的缓存工厂支持 -->
    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:cache/ehcache-application-local.xml" />
    </bean>
    <!--
        交由shiro管理
        &lt;!&ndash; spring对ehcache的缓存管理 &ndash;&gt;
        <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
            <property name="cacheManager" ref="ehCacheManagerFactory"></property>
        </bean>
        &lt;!&ndash; 使用缓存annotation 配置(请将其配置在Spring主配置文件中) &ndash;&gt;
        <cache:annotation-driven cache-manager="ehCacheManager" mode="proxy" proxy-target-class="true" />
        -->
    <!-- Spring 自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器SimpleCache(该功能是从Spring3.1开始提供的) -->
    <!--
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
            </set>
        </property>
    </bean>
     -->
    <!-- ========================================= 缓存相关配置 END =========================================== -->

    <!-- ========================================= 任务调度相关配置 START ========================================= -->
    <!--
        &lt;!&ndash; 定时器：Quartz 方式（重量级工具）。作业类需继承自特定的基类：org.springframework.scheduling.quartz.QuartzJobBean	 &ndash;&gt;
        &lt;!&ndash; 注册作业任务类（定时执行工作内容的对象） &ndash;&gt;
        <bean id="timersTerminals" class="com.XXX.controllers.TimerTerminalsControllers"/>
        &lt;!&ndash; 定义调用对象和调用对象的方法 &ndash;&gt;
        <bean id="jobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
            &lt;!&ndash; 作业任务类 &ndash;&gt;
            <property name="targetObject" >
                <ref bean="timersTerminals"/>
            </property>
            &lt;!&ndash; 作业任务类中具体执行作业任务方法 &ndash;&gt;
            <property name="targetMethod">
                <value>start</value>
            </property>
            &lt;!&ndash; 作业不并发调度 &ndash;&gt;
            <property name="concurrent" value="false"/>
        </bean>

        &lt;!&ndash; 配置作业任务触发方式,触发时间 &ndash;&gt;
        &lt;!&ndash; 每隔指定时间则触发一次，在Quartz中对应的触发器为：org.springframework.scheduling.quartz.SimpleTriggerBean &ndash;&gt;
        &lt;!&ndash; 每到指定时间则触发一次，在Quartz中对应的调度器为：org.springframework.scheduling.quartz.CronTriggerBean &ndash;&gt;

        <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
            <property name="jobDetail" ref="jobtask"/>
            <property name="cronExpression">
                <value>0 0 0 * * ?</value>&lt;!&ndash; 每天0点执行一次 &ndash;&gt;
            </property>
        </bean>
        &lt;!&ndash; 调度工厂,如果将lazy-init='false'那么容器启动就会执行调度程序 &ndash;&gt;
        <bean id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
            <property name="triggers">
                <list>
                    <ref bean="doTime"/>  &lt;!&ndash; 关联定义的定时器 &ndash;&gt;
                </list>
            </property>
        </bean>

        &lt;!&ndash;     定时器：Spring-Task方式（支持注解与配置两种方式）。 作业类为普通类不需要继承基类&ndash;&gt;
        &lt;!&ndash; 定义调用对象和调用对象的方法 &ndash;&gt;
        <bean id="taskManageController" class="com.enrising.taskManage.controllers.TaskManageController"></bean>
        <task:scheduled-tasks>
            &lt;!&ndash; 调用的类taskManageController    定时执行的方法findBirthdayOldman   这里表示的是每天早上1:00:00调用一次&ndash;&gt;
            <task:scheduled ref="taskManageController" method="findBirthdayOldman" cron="0 0 1 * * ?" />
        </task:scheduled-tasks>

        <task:scheduled-tasks>
            &lt;!&ndash; 调用的对象taskManageController    定时执行的方法sendBirthdaySms   这里表示的是每天早上9:00:00调用一次 &ndash;&gt;
            <task:scheduled ref="taskManageController" method="sendBirthdaySms" cron="0 0 9 * * ?" />
        </task:scheduled-tasks>
        -->
    <!-- ========================================= 任务调度相关配置 END =========================================== -->

    <!-- ========================================= 缓存相关配置 START ========================================= -->
    <!-- ========================================= 缓存相关配置 END =========================================== -->
</beans>