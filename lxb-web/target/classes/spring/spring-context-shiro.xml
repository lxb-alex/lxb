<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
   Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行Web应用中，
   Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持
   这里的bean id 必须要和web.xml中的名称相同
-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"></property>
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->
        <property name="loginUrl" value="/login.html"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
        <!-- <property name="successUrl" value="/" ></property> -->
        <!-- 用户访问未对其授权的资源时（没有权限要跳转的链接），所显示的连接 -->
        <property name="unauthorizedUrl" value="/"></property>
        <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
    </bean>

    <!-- Shiro权限过滤过滤器定义 -->
    <!-- 这里的每一行代表了一个路由，而后面的anno，user等等，也就是相对应的Filter，（也可以自定义Filter） -->
    <!--
        anon:例子/admins/**=anon 没有参数，表示可以匿名使用。
        authc:例如/admins/user/**=authc 表示需要认证(登录)才能使用，没有参数
        roles：例子/admins/user/**=roles[admin], 参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，
            例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
        perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
            例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
        rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
        port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
            其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，
            queryString 是你访问的url里的？后面的参数。
        authcBasic：例如/admins/user/**=authcBasic 没有参数表示httpBasic认证
        ssl:例子/admins/user/**=ssl 没有参数，表示安全的url请求，协议为https
        user:例如/admins/user/**=user 没有参数表示必须存在用户，当登入操作时不做检查
    -->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                /login.html=anon
                /static/** = anon
                /userfiles/** = anon
                /captcha.jpg = anon
                /login = authc
                /logout = logout
                <!--/** = user-->
            </value>
        </constructor-arg>
    </bean>

    <!-- 定义Shiro安全管理配置 -->
    <!-- SecurityManager 它和我们前面讲的ShiroFilterFactoryBean的关系形象的将就是ShiroFilterFactoryBean是一个
        路由规则配置仓库和代理类，其实真正的逻辑都是在SecurityManager中进行的，-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限）从数据库读取资源-->
        <!--可以配置多个realm，如：当有不同数据库时-->
        <!--        <property name="realms">
                    <bean id="systemAuthorizingRealm" class="com.lxb.sys.security.SystemAuthorizingRealm"/>
                </property>-->
        <property name="realm" ref="systemAuthorizingRealm"/> <!-- 加上注解可以直接引用 -->
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>

    <!-- 考虑到集群，使用DefaultWebSessionManager来做sessionManager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 使用EnterpriseCacheSessionDAO，解决session同步问题 -->
        <property name="sessionDAO" ref="sessionDAO" />

        <!-- 会话超时时间，单位：毫秒  -->
        <property name="globalSessionTimeout" value="18000000"/>

        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
        <property name="sessionValidationInterval" value="1200000"/>
        <!-- <property name="sessionValidationSchedulerEnabled" value="false"/> -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>

        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>

    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
    当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="lxb.session.id"/>
    </bean>

    <!-- 使用EnterpriseCacheSessionDAO，将session放入到缓存，通过同步配置，将缓存同步到其他集群点上，解决session同步问题。 -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!-- 活动session缓存名称 -->
        <property name="activeSessionsCacheName" value="shiroActiveSessionCache" />
    </bean>

    <!-- 定义授权缓存管理器  (因为shiro的session是自己实现的，所以我们还需要一个缓存框架) -->
    <!-- <bean id="shiroCacheManager" class="com.thinkgem.jeesite.common.security.shiro.cache.SessionCacheManager" /> -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManagerFactory"/>
    </bean>


    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- AOP式方法级权限检查  -->
    <!-- AOP式方法级权限检查  此方法会产生二次代理，换位spring-mvc 里的aop:config方式 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>